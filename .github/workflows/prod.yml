on:
  push:
    branches:
      - main  # Este evento dispara o workflow quando há um push na branch main.

jobs:
  build_and_push:  # Definição do trabalho para construir e enviar a imagem para o Docker Hub.
    runs-on: ubuntu-latest  # Este trabalho é executado no ambiente virtual mais recente do Ubuntu fornecido pelo GitHub.

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2  # Esta ação verifica o repositório Git para que o workflow possa acessar seu conteúdo.

      - name: Set up Java
        uses: actions/setup-java@v2  # Configura o ambiente Java usando a ação setup-java.
        with:
          distribution: 'temurin'  # Especifica a distribuição do JDK para usar.
          java-version: '17'  # Define a versão do Java a ser usada.

      - name: Build project
        run: mvn clean install -DskipTests  # Executa o Maven para construir o projeto, pulando os testes.

      - name: Login Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}  # Usa o nome de usuário do Docker armazenado nas secrets do GitHub.
          DOCKER_PAT: ${{ secrets.DOCKER_PAT }}  # Usa o Personal Access Token (PAT) do Docker armazenado nas secrets do GitHub.
        run: |
          echo "$DOCKER_PAT" | docker login -u "$DOCKER_USERNAME" --password-stdin  # Loga no Docker Hub para permitir o push da imagem.

      - name: Build docker image
        run: docker build -t francismario/banking-api .  # Constrói a imagem Docker localmente, etiquetando-a apropriadamente.

      - name: Push image docker
        run: docker push francismario/banking-api  # Envia a imagem construída para o Docker Hub.

  deploy:  # Definição do trabalho para implantar a aplicação.
    needs: build_and_push  # Este trabalho depende da conclusão bem-sucedida do trabalho build_and_push.
    runs-on: self-hosted  # Este trabalho é executado em um runner configurado pelo usuário, não um provido pelo GitHub.

    steps:
      - name: Install Docker if not found  # Esta etapa verifica e instala o Docker se não estiver presente.
        run: |
          if ! command -v docker &>/dev/null; then  # Verifica se o comando docker existe.
            echo "Docker is not installed. Installing now..."
            sudo yum update -y  # Atualiza os pacotes disponíveis e suas versões.
            sudo amazon-linux-extras install docker -y  # Instala o Docker no Amazon Linux.
            sudo service docker start  # Inicia o serviço Docker.
            sudo systemctl enable docker  # Habilita o Docker para iniciar em cada boot.
            sudo usermod -a -G docker ec2-user  # Adiciona o usuário ao grupo docker para executar comandos sem sudo.
          else
            echo "Docker is already installed."
          fi
        shell: bash

      - name: Pull image from docker hub  # Esta etapa puxa a última versão da imagem do Docker Hub.
        run: docker pull francismario/banking-api:latest

      - name: Remove docker container  # Esta etapa remove o contêiner existente antes de rodar um novo.
        run: |
          if docker container ls -a | grep -q deploy_application_api; then  # Checa se o contêiner existe.
            docker rm -f deploy_application_api  # Força a remoção do contêiner se existir.
          else
            echo "No container named deploy_application_api found. Skipping removal."
          fi

      - name: Run docker container  # Esta etapa inicia um novo contêiner com a imagem atualizada.
        run: docker run -d -p 8080:8080 -e DATABASE_USERNAME:${{secrets.DATABASE_USERNAME}} -e DATABASE_PASSWORD:'${{secrets.DATABASE_PASSWORD}}' -e DATABASE_URL:${{secrets.DATABASE_URL}} --name deploy_application_api francismario/banking-api
